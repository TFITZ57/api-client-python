{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Coin Metrics Python API v4 client library \u00b6 This is an official Python API client for Coin Metrics API v4. Installation \u00b6 To install the client you can run the following command: pip install coinmetrics-api-client Introduction \u00b6 You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. client = CoinMetricsClient(environ.get(\"CM_API_KEY\")) After that you can use the client object for getting stuff like available markets: print(client.catalog_markets()) or to query all available assets along with what is available for those assets, like metrics, markets: print(client.catalog_assets()) you can also use filters for the catalog endpoints like this: print(client.catalog_assets(assets=['btc'])) in this case you would get all the information for btc only Getting timeseries data \u00b6 For getting timeseries data you want to use methods of the client class that start with get_ . For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades(markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03'): print(trade) Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRate', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d'): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present. For more information about the available methods in the client please reference API Client Spec","title":"Home"},{"location":"index.html#coin-metrics-python-api-v4-client-library","text":"This is an official Python API client for Coin Metrics API v4.","title":"Coin Metrics Python API v4 client library"},{"location":"index.html#installation","text":"To install the client you can run the following command: pip install coinmetrics-api-client","title":"Installation"},{"location":"index.html#introduction","text":"You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. client = CoinMetricsClient(environ.get(\"CM_API_KEY\")) After that you can use the client object for getting stuff like available markets: print(client.catalog_markets()) or to query all available assets along with what is available for those assets, like metrics, markets: print(client.catalog_assets()) you can also use filters for the catalog endpoints like this: print(client.catalog_assets(assets=['btc'])) in this case you would get all the information for btc only","title":"Introduction"},{"location":"index.html#getting-timeseries-data","text":"For getting timeseries data you want to use methods of the client class that start with get_ . For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades(markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03'): print(trade) Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRate', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d'): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present. For more information about the available methods in the client please reference API Client Spec","title":"Getting timeseries data"},{"location":"api_client.html","text":"coinmetrics.api_client \u00b6 CoinMetricsClient Objects \u00b6 class CoinMetricsClient () catalog_assets \u00b6 | catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about assets. Arguments : assets : A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. Returns : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc. catalog_exchanges \u00b6 | catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about exchanges. Arguments : exchanges : A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : Information that is available for requested exchanges, like: markets, min and max time available. catalog_indexes \u00b6 | catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about indexes. Arguments : indexes : A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : Information that is available for requested indexes, like: Full name, and available frequencies. catalog_markets \u00b6 | catalog_markets ( exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> List [ Dict [ str , Any ]] Returns list of markets that correspond to a filter, if no filter is set, returns all available asset. Arguments : exchange : name of the exchange base : name of base asset quote : name of quote asset asset : name of either base or quote asset symbol : name of a symbol. Usually used for futures contracts. Returns : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_metrics \u00b6 | catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> List [ Dict [ str , Any ]] Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics : A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable : Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. get_index_levels \u00b6 | get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes : list of index names frequency : frequency of the returned timeseries, for e.g 15s, 1d, etc. page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Index Levels timeseries. get_market_candles \u00b6 | get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. Arguments : markets : list of market names frequency : frequency of the returned timeseries, for e.g 5m, 1h, 1d, etc. page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Candles timeseries. get_market_trades \u00b6 | get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market trades for specified markets and date range. Arguments : markets : list of market names page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Trades timeseries. get_market_quotes \u00b6 | get_market_quotes ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market quotes for specified markets and date range. Arguments : markets : list of market names page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Quotes timeseries. get_market_orderbooks \u00b6 | get_market_orderbooks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market order books for specified markets and date range. Arguments : markets : list of market names page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Order Books timeseries. get_asset_metrics \u00b6 | get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns asset metrics books for specified assets, metrics, date range and frequency. Arguments : assets : list of asset names metrics : list of metric names frequency : frequency of the returned timeseries, for e.g 1s, 1b, 1d, etc. page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Asset Metrics timeseries.","title":"API Client Spec"},{"location":"api_client.html#coinmetricsapi_client","text":"","title":"coinmetrics.api_client"},{"location":"api_client.html#coinmetricsclient-objects","text":"class CoinMetricsClient ()","title":"CoinMetricsClient Objects"},{"location":"api_client.html#catalog_assets","text":"| catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about assets. Arguments : assets : A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. Returns : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc.","title":"catalog_assets"},{"location":"api_client.html#catalog_exchanges","text":"| catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about exchanges. Arguments : exchanges : A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : Information that is available for requested exchanges, like: markets, min and max time available.","title":"catalog_exchanges"},{"location":"api_client.html#catalog_indexes","text":"| catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about indexes. Arguments : indexes : A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : Information that is available for requested indexes, like: Full name, and available frequencies.","title":"catalog_indexes"},{"location":"api_client.html#catalog_markets","text":"| catalog_markets ( exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> List [ Dict [ str , Any ]] Returns list of markets that correspond to a filter, if no filter is set, returns all available asset. Arguments : exchange : name of the exchange base : name of base asset quote : name of quote asset asset : name of either base or quote asset symbol : name of a symbol. Usually used for futures contracts. Returns : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_markets"},{"location":"api_client.html#catalog_metrics","text":"| catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> List [ Dict [ str , Any ]] Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics : A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable : Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_metrics"},{"location":"api_client.html#get_index_levels","text":"| get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes : list of index names frequency : frequency of the returned timeseries, for e.g 15s, 1d, etc. page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Index Levels timeseries.","title":"get_index_levels"},{"location":"api_client.html#get_market_candles","text":"| get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. Arguments : markets : list of market names frequency : frequency of the returned timeseries, for e.g 5m, 1h, 1d, etc. page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Candles timeseries.","title":"get_market_candles"},{"location":"api_client.html#get_market_trades","text":"| get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market trades for specified markets and date range. Arguments : markets : list of market names page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Trades timeseries.","title":"get_market_trades"},{"location":"api_client.html#get_market_quotes","text":"| get_market_quotes ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market quotes for specified markets and date range. Arguments : markets : list of market names page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Quotes timeseries.","title":"get_market_quotes"},{"location":"api_client.html#get_market_orderbooks","text":"| get_market_orderbooks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns market order books for specified markets and date range. Arguments : markets : list of market names page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Market Order Books timeseries.","title":"get_market_orderbooks"},{"location":"api_client.html#get_asset_metrics","text":"| get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns asset metrics books for specified assets, metrics, date range and frequency. Arguments : assets : list of asset names metrics : list of metric names frequency : frequency of the returned timeseries, for e.g 1s, 1b, 1d, etc. page_size : number of items returned per page, typically you don't want to change this parameter unless you are interested in a first retuned item only. paging_from : Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time : Start time of the timeseries. end_time : End time of the timeseries. start_inclusive : Flag to define if start timestamp must be included in the timeseries if present. end_inclusive : Flag to define if end timestamp must be included in the timeseries if present. timezone : timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : Asset Metrics timeseries.","title":"get_asset_metrics"}]}