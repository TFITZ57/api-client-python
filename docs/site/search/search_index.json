{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Coin Metrics Python API v4 client library \u00b6 This is an official Python API client for Coin Metrics API v4. Installation \u00b6 To install the client you can run the following command: pip install coinmetrics-api-client Introduction \u00b6 You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient(environ.get(\"CM_API_KEY\")) # or to use community API: client = CoinMetricsClient() After that you can use the client object for getting stuff like available markets: print(client.catalog_markets()) or to query all available assets along with what is available for those assets, like metrics, markets: print(client.catalog_assets()) you can also use filters for the catalog endpoints like this: print(client.catalog_assets(assets=['btc'])) in this case you would get all the information for btc only You can use this client to connect to our API v4 and get catalog or timeseries data from python environment. It natively supports paging over the data so you can use it to iterate over timeseries entries seamlessly. The client can be used to query both pro and community data. Getting timeseries data \u00b6 For getting timeseries data you want to use methods of the client class that start with get_ . For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades(markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03'): print(trade) Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d'): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present. DataFrames \u00b6 Timeseries data can be transformed into a pandas dataframe by using the to_dataframe() method. The code snippet below shows how: import pandas as pd from coinmetrics.api_client import CoinMetricsClient from os import environ client = CoinMetricsClient() asset_metrics = client.get_asset_metrics( assets=['btc', 'eth'], metrics='PriceUSD', start_time='2021-09-19T00:00:00Z', end_time='2021-09-19T00:01:00Z' ) asset_metrics_df = asset_metrics.to_dataframe() print(asset_metrics_df.head()) If you want to use dataframes, then you will need to install pandas Notes * This only works with requests that return the type DataCollection . Thus, catalog requests, which return lists cannot be returned as dataframes. Please see the API Client Spec for a full list of requests and their return types. * API restrictions apply. Paging \u00b6 You can make the datapoints to iterate from start or from end (default). for that you should use a paging_from argument like the following: from coinmetrics.api_client import CoinMetricsClient from coinmetrics.constants import PagingFrom client = CoinMetricsClient() for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD'], paging_from=PagingFrom.START): print(metric_data) PagingFrom.END: is available but it is also a default value also, so you might not want to set it. Extended documentation \u00b6 For more information about the available methods in the client please reference API Client Spec","title":"Home"},{"location":"index.html#coin-metrics-python-api-v4-client-library","text":"This is an official Python API client for Coin Metrics API v4.","title":"Coin Metrics Python API v4 client library"},{"location":"index.html#installation","text":"To install the client you can run the following command: pip install coinmetrics-api-client","title":"Installation"},{"location":"index.html#introduction","text":"You can use this client for querying all kinds of data with your API. To initialize the client you should use your API key, and the CoinMetricsClient class like the following. from coinmetrics.api_client import CoinMetricsClient client = CoinMetricsClient(environ.get(\"CM_API_KEY\")) # or to use community API: client = CoinMetricsClient() After that you can use the client object for getting stuff like available markets: print(client.catalog_markets()) or to query all available assets along with what is available for those assets, like metrics, markets: print(client.catalog_assets()) you can also use filters for the catalog endpoints like this: print(client.catalog_assets(assets=['btc'])) in this case you would get all the information for btc only You can use this client to connect to our API v4 and get catalog or timeseries data from python environment. It natively supports paging over the data so you can use it to iterate over timeseries entries seamlessly. The client can be used to query both pro and community data.","title":"Introduction"},{"location":"index.html#getting-timeseries-data","text":"For getting timeseries data you want to use methods of the client class that start with get_ . For example if you want to get a bunch of market data trades for coinbase btc-usd pair you can run something similar to the following: for trade in client.get_market_trades(markets='coinbase-btc-usd-spot', start_time='2020-01-01', end_time='2020-01-03'): print(trade) Or if you want to see daily btc asset metrics you can use something like this: for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD', 'BlkHgt', 'AdrActCnt', 'AdrActRecCnt', 'FlowOutBFXUSD'], frequency='1d'): print(metric_data) This will print you the requested metrics for all the days where we have any of the metrics present.","title":"Getting timeseries data"},{"location":"index.html#dataframes","text":"Timeseries data can be transformed into a pandas dataframe by using the to_dataframe() method. The code snippet below shows how: import pandas as pd from coinmetrics.api_client import CoinMetricsClient from os import environ client = CoinMetricsClient() asset_metrics = client.get_asset_metrics( assets=['btc', 'eth'], metrics='PriceUSD', start_time='2021-09-19T00:00:00Z', end_time='2021-09-19T00:01:00Z' ) asset_metrics_df = asset_metrics.to_dataframe() print(asset_metrics_df.head()) If you want to use dataframes, then you will need to install pandas Notes * This only works with requests that return the type DataCollection . Thus, catalog requests, which return lists cannot be returned as dataframes. Please see the API Client Spec for a full list of requests and their return types. * API restrictions apply.","title":"DataFrames"},{"location":"index.html#paging","text":"You can make the datapoints to iterate from start or from end (default). for that you should use a paging_from argument like the following: from coinmetrics.api_client import CoinMetricsClient from coinmetrics.constants import PagingFrom client = CoinMetricsClient() for metric_data in client.get_asset_metrics(assets='btc', metrics=['ReferenceRateUSD'], paging_from=PagingFrom.START): print(metric_data) PagingFrom.END: is available but it is also a default value also, so you might not want to set it.","title":"Paging"},{"location":"index.html#extended-documentation","text":"For more information about the available methods in the client please reference API Client Spec","title":"Extended documentation"},{"location":"api_client.html","text":"coinmetrics.api_client \u00b6 CoinMetricsClient Objects \u00b6 class CoinMetricsClient () catalog_assets \u00b6 | catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. Returns : list(dict(str, any)) : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc. catalog_asset_pairs \u00b6 | catalog_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested asset-asset pair like metrics and their respective frequencies and time ranges catalog_exchanges \u00b6 | catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : list(dict(str, any)) : Information that is available for requested exchanges, like: markets, min and max time available. catalog_exchange_assets \u00b6 | catalog_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested exchange-asset pair like metrics and their respective frequencies and time ranges catalog_indexes \u00b6 | catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : list(dict(str, any)) : Information that is available for requested indexes, like: Full name, and available frequencies. catalog_institutions \u00b6 | catalog_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested institution like metrics and their respective frequencies and time ranges. catalog_markets \u00b6 | catalog_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> List [ Dict [ str , Any ]] Returns list of available markets that correspond to a filter. If no filter is set, returns all available assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames. catalog_metrics \u00b6 | catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> List [ Dict [ str , Any ]] Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available. catalog_full_assets \u00b6 | catalog_full_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all supported assets are returned. Returns : list(dict(str, any)) : Information that is supported for requested assets, like: Full name, metrics and supported frequencies, markets, exchanges, etc. catalog_full_asset_pairs \u00b6 | catalog_full_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested asset-asset pair like metrics and their respective frequencies and time ranges catalog_full_exchanges \u00b6 | catalog_full_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all supported exchanges are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchanges, like: markets, min and max time supported. catalog_full_exchange_assets \u00b6 | catalog_full_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchange-asset pair like metrics and their respective frequencies and time ranges catalog_full_indexes \u00b6 | catalog_full_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested indexes, like: Full name, and supported frequencies. catalog_full_institutions \u00b6 | catalog_full_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested institution like metrics and their respective frequencies and time ranges. catalog_full_markets \u00b6 | catalog_full_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> List [ Dict [ str , Any ]] Returns list of supported markets that correspond to a filter. If no filter is set, returns all supported assets. Arguments : markets : list of market names, e.g. 'coinbase-btc-usd-spot' exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max supported time frames. catalog_full_metrics \u00b6 | catalog_full_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> List [ Dict [ str , Any ]] Returns list of supported metrics along with information for them like description, category, precision and assets for which a metric is supported. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all supported metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is supported. get_asset_metrics \u00b6 | get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_asset : Optional [ int ] = None ) -> DataCollection Returns requested metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"asset\", \"height\", or \"time\". Default is \"asset\". Metrics with 1b frequency are sorted by (asset, height, block_hash) tuples by default. Metrics with other frequencies are sorted by (asset, time) by default. If you want to sort 1d metrics by (time, asset) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of assets. limit_per_asset ( int ): How many entries per asset the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_exchange_metrics \u00b6 | get_exchange_metrics ( exchanges : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. 'exchange', 'time'. Metrics are sorted by 'exchange' by default. limit_per_exchange ( int ): How many entries per exchange the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_exchange_asset_metrics \u00b6 | get_exchange_asset_metrics ( exchange_assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange_asset : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchange-asset. Arguments : exchange_assets ( list(str), str ): A single exchange-asset pairs (e.g. \"binance-btc\" or a list of exchange-asset-pair to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"exchange_asset\", \"time\". Default is \"exchange_asset\". limit_per_exchange_asset ( int ): How many entries per exchange-asset the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries. get_pair_metrics \u00b6 | get_pair_metrics ( pairs : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns metrics books for specified asset-asset pairs. Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g.\"pair\", \"time\". \"pair\" by default limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries. get_institution_metrics \u00b6 | get_institution_metrics ( institutions : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_institution : Optional [ int ] = None ) -> DataCollection Returns metrics for specified institutions. Arguments : institutions ( list(str), str ): A single institution name or a list of institutions to return info for. metrics ( list(str), str ): list of institution-specific metric names, e.g. 'gbtc_total_assets' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"institution\", or \"time\". Default is \"institution\". limit_per_institution ( int ): How many entries per institution the result should contain. Returns : DataCollection : Asset Metrics timeseries. get_index_levels \u00b6 | get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. Returns : DataCollection : Index Levels timeseries. get_index_constituents \u00b6 | get_index_constituents ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index constituents for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Index Constituents timeseries. get_market_candles \u00b6 | get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. For more information on market candles, see: https://docs.coinmetrics.io/info/markets/candles Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries. get_market_trades \u00b6 | get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market trades for specified markets and date range. For more information on market trades, see: https://docs.coinmetrics.io/info/markets/trades Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Trades timeseries. get_market_open_interest \u00b6 | get_market_open_interest ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market open interest for specified markets and date range. For more information on open interest, see: https://docs.coinmetrics.io/info/markets/openinterest Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Open Interest timeseries. get_market_liquidations \u00b6 | get_market_liquidations ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market liquidations for specified markets and date range. For more information on liquidations, see: https://docs.coinmetrics.io/info/markets/liquidations Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Liquidations timeseries. get_market_funding_rates \u00b6 | get_market_funding_rates ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market funding rates for specified markets and date range. For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries. get_market_orderbooks \u00b6 | get_market_orderbooks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market order books for specified markets and date range. For more information on order books, see: https://docs.coinmetrics.io/info/markets/orderbook Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Order Books timeseries. get_market_quotes \u00b6 | get_market_quotes ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market quotes for specified markets and date range. For more information on quotes, see: https://docs.coinmetrics.io/info/markets/quotes Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Quotes timeseries. get_mining_pool_tips_summary \u00b6 | get_mining_pool_tips_summary ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mining pool tips summaries for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mining Pool Tips timeseries. get_mempool_feerates \u00b6 | get_mempool_feerates ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = 200 , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mempool feerates for the specified assets. Note: for this method, page_size must be <= 200. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mempool Fee Rates timeseries. get_list_of_blocks \u00b6 | get_list_of_blocks ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata get_list_of_accounts \u00b6 | get_list_of_accounts ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata get_list_of_transactions \u00b6 | get_list_of_transactions ( asset : str , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata get_list_of_balance_updates \u00b6 | get_list_of_balance_updates ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates get_full_block \u00b6 | get_full_block ( asset : str , block_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash Returns : list(dict(str), any) : blockchain block data get_full_transaction \u00b6 | get_full_transaction ( asset : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name transaction_hash ( str ): transaction hash Returns : list(dict(str), any) : block transaction data get_full_transaction_for_block \u00b6 | get_full_transaction_for_block ( asset : str , block_hash : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash transaction_hash ( str ): transaction hash Returns : list(dict(str, Any)) : block transaction data with balance updates get_transaction_tracker \u00b6 | get_transaction_tracker ( asset : str , txids : Optional [ Union [ List [ str ], str ]] = None , replacements_for_txids : Optional [ Union [ List [ str ], str ]] = None , replacements_only : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns status updates for the specified or all transactions. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to track. replacements_for_txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to get the corresponding replacement transactions for. Mutually exclusive with txids. replacements_only ( bool ): Boolean indicating if the response should contain only the replacement transactions. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : status updates for the specified or all transactions.","title":"API Client Spec"},{"location":"api_client.html#coinmetricsapi_client","text":"","title":"coinmetrics.api_client"},{"location":"api_client.html#coinmetricsclient-objects","text":"class CoinMetricsClient ()","title":"CoinMetricsClient Objects"},{"location":"api_client.html#catalog_assets","text":"| catalog_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all available assets are returned. Returns : list(dict(str, any)) : Information that is available for requested assets, like: Full name, metrics and available frequencies, markets, exchanges, etc.","title":"catalog_assets"},{"location":"api_client.html#catalog_asset_pairs","text":"| catalog_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested asset-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_asset_pairs"},{"location":"api_client.html#catalog_exchanges","text":"| catalog_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all available exchanges are returned. Returns : list(dict(str, any)) : Information that is available for requested exchanges, like: markets, min and max time available.","title":"catalog_exchanges"},{"location":"api_client.html#catalog_exchange_assets","text":"| catalog_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested exchange-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_exchange_assets"},{"location":"api_client.html#catalog_indexes","text":"| catalog_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all available indexes are returned. Returns : list(dict(str, any)) : Information that is available for requested indexes, like: Full name, and available frequencies.","title":"catalog_indexes"},{"location":"api_client.html#catalog_institutions","text":"| catalog_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about available institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all available pairs are returned. Returns : list(dict(str, any)) : Information that is available for requested institution like metrics and their respective frequencies and time ranges.","title":"catalog_institutions"},{"location":"api_client.html#catalog_markets","text":"| catalog_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> List [ Dict [ str , Any ]] Returns list of available markets that correspond to a filter. If no filter is set, returns all available assets. Arguments : markets ( list(str), str ): list of market names, e.g. 'coinbase-btc-usd-spot' exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max available time frames.","title":"catalog_markets"},{"location":"api_client.html#catalog_metrics","text":"| catalog_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> List [ Dict [ str , Any ]] Returns list of available metrics along with information for them like description, category, precision and assets for which a metric is available. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all available metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is available.","title":"catalog_metrics"},{"location":"api_client.html#catalog_full_assets","text":"| catalog_full_assets ( assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported assets. Arguments : assets ( list(str), str ): A single asset or a list of assets to return info for. If no assets provided, all supported assets are returned. Returns : list(dict(str, any)) : Information that is supported for requested assets, like: Full name, metrics and supported frequencies, markets, exchanges, etc.","title":"catalog_full_assets"},{"location":"api_client.html#catalog_full_asset_pairs","text":"| catalog_full_asset_pairs ( asset_pairs : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported asset-asset pairs Arguments : asset_pairs ( list(str), str ): A single asset-asset pair (e.g. \"btc-eth\") or a list of asset-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested asset-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_full_asset_pairs"},{"location":"api_client.html#catalog_full_exchanges","text":"| catalog_full_exchanges ( exchanges : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. If no exchanges provided, all supported exchanges are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchanges, like: markets, min and max time supported.","title":"catalog_full_exchanges"},{"location":"api_client.html#catalog_full_exchange_assets","text":"| catalog_full_exchange_assets ( exchange_assets : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported exchange-asset pairs Arguments : exchange_assets ( list(str), str ): A single exchange-asset pair (e.g. \"binance-btc\") or a list of exchange-asset pairs to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested exchange-asset pair like metrics and their respective frequencies and time ranges","title":"catalog_full_exchange_assets"},{"location":"api_client.html#catalog_full_indexes","text":"| catalog_full_indexes ( indexes : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported indexes. Arguments : indexes ( list(str), str ): A single index name or a list of indexes to return info for. If no indexes provided, all supported indexes are returned. Returns : list(dict(str, any)) : Information that is supported for requested indexes, like: Full name, and supported frequencies.","title":"catalog_full_indexes"},{"location":"api_client.html#catalog_full_institutions","text":"| catalog_full_institutions ( institutions : Optional [ Union [ List [ str ], str ]] = None ) -> List [ Dict [ str , Any ]] Returns meta information about supported institutions Arguments : institutions ( list(str), str ): A single institution (e.g. \"grayscale\") or a list of institutions to return info for. If none are provided, all supported pairs are returned. Returns : list(dict(str, any)) : Information that is supported for requested institution like metrics and their respective frequencies and time ranges.","title":"catalog_full_institutions"},{"location":"api_client.html#catalog_full_markets","text":"| catalog_full_markets ( markets : Optional [ Union [ List [ str ], str ]] = None , exchange : Optional [ str ] = None , base : Optional [ str ] = None , quote : Optional [ str ] = None , asset : Optional [ str ] = None , symbol : Optional [ str ] = None ) -> List [ Dict [ str , Any ]] Returns list of supported markets that correspond to a filter. If no filter is set, returns all supported assets. Arguments : markets : list of market names, e.g. 'coinbase-btc-usd-spot' exchange ( str ): name of the exchange base ( str ): name of base asset quote ( str ): name of quote asset asset ( str ): name of either base or quote asset symbol ( str ): name of a symbol. Usually used for futures contracts. Returns : list(dict(str, any)) : Information about markets that correspond to a filter along with meta information like: type of market and min and max supported time frames.","title":"catalog_full_markets"},{"location":"api_client.html#catalog_full_metrics","text":"| catalog_full_metrics ( metrics : Optional [ Union [ List [ str ], str ]] = None , reviewable : Optional [ bool ] = None ) -> List [ Dict [ str , Any ]] Returns list of supported metrics along with information for them like description, category, precision and assets for which a metric is supported. Arguments : metrics ( list(str), str ): A single metric name or a list of metrics to return info for. If no metrics provided, all supported metrics are returned. reviewable ( bool ): Show only reviewable or non-reviewable by human metrics. By default all metrics are shown. Returns : list(dict(str, any)) : Information about metrics that correspond to a filter along with meta information like: description, category, precision and assets for which a metric is supported.","title":"catalog_full_metrics"},{"location":"api_client.html#get_asset_metrics","text":"| get_asset_metrics ( assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_asset : Optional [ int ] = None ) -> DataCollection Returns requested metrics for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' metrics ( list(str), str ): list of asset-specific metric names, e.g. 'PriceUSD' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"asset\", \"height\", or \"time\". Default is \"asset\". Metrics with 1b frequency are sorted by (asset, height, block_hash) tuples by default. Metrics with other frequencies are sorted by (asset, time) by default. If you want to sort 1d metrics by (time, asset) you should choose time as value for the sort parameter. Sorting by time is useful if you request metrics for a set of assets. limit_per_asset ( int ): How many entries per asset the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_asset_metrics"},{"location":"api_client.html#get_exchange_metrics","text":"| get_exchange_metrics ( exchanges : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchanges. Arguments : exchanges ( list(str), str ): A single exchange name or a list of exchanges to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. 'exchange', 'time'. Metrics are sorted by 'exchange' by default. limit_per_exchange ( int ): How many entries per exchange the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_exchange_metrics"},{"location":"api_client.html#get_exchange_asset_metrics","text":"| get_exchange_asset_metrics ( exchange_assets : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_exchange_asset : Optional [ int ] = None ) -> DataCollection Returns metrics for specified exchange-asset. Arguments : exchange_assets ( list(str), str ): A single exchange-asset pairs (e.g. \"binance-btc\" or a list of exchange-asset-pair to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"exchange_asset\", \"time\". Default is \"exchange_asset\". limit_per_exchange_asset ( int ): How many entries per exchange-asset the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries.","title":"get_exchange_asset_metrics"},{"location":"api_client.html#get_pair_metrics","text":"| get_pair_metrics ( pairs : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_pair : Optional [ int ] = None ) -> DataCollection Returns metrics books for specified asset-asset pairs. Arguments : pairs ( list(str), str ): A single asset-asset pairs (e.g. \"btc-usd\") or a list of asset-asset-pairs to return info for. metrics ( list(str), str ): list of exchange-specific metric names, e.g. 'open_interest_reported_future_usd'. To find a list of available metrics for a given exchange, call client.catalog_exchanges() frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g.\"pair\", \"time\". \"pair\" by default limit_per_pair ( int ): How many entries per asset pair the result should contain. Returns : DataCollection : Exchange-Asset Metrics timeseries.","title":"get_pair_metrics"},{"location":"api_client.html#get_institution_metrics","text":"| get_institution_metrics ( institutions : Union [ List [ str ], str ], metrics : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_height : Optional [ int ] = None , end_height : Optional [ int ] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , sort : Optional [ str ] = None , limit_per_institution : Optional [ int ] = None ) -> DataCollection Returns metrics for specified institutions. Arguments : institutions ( list(str), str ): A single institution name or a list of institutions to return info for. metrics ( list(str), str ): list of institution-specific metric names, e.g. 'gbtc_total_assets' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_height ( int ): Start block of the timeseries (only applicable when querying with frequency 1b). end_height ( int ): End block of the timeseries (only applicable when querying with frequency 1b). start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. sort ( str ): How results will be sorted, e.g. \"institution\", or \"time\". Default is \"institution\". limit_per_institution ( int ): How many entries per institution the result should contain. Returns : DataCollection : Asset Metrics timeseries.","title":"get_institution_metrics"},{"location":"api_client.html#get_index_levels","text":"| get_index_levels ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_index : Optional [ int ] = None ) -> DataCollection Returns index levels for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_index ( int ): How many entries per index the result should contain. Returns : DataCollection : Index Levels timeseries.","title":"get_index_levels"},{"location":"api_client.html#get_index_constituents","text":"| get_index_constituents ( indexes : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns index constituents for specified indexes and date range. Arguments : indexes ( list(str), str ): list of index names, e.g. 'CMBI10' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Index Constituents timeseries.","title":"get_index_constituents"},{"location":"api_client.html#get_market_candles","text":"| get_market_candles ( markets : Union [ List [ str ], str ], frequency : Optional [ str ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market candles for specified markets, frequency and date range. For more information on market candles, see: https://docs.coinmetrics.io/info/markets/candles Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' frequency ( str ): frequency of the returned timeseries, e.g 15s, 1d, etc. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Candles timeseries.","title":"get_market_candles"},{"location":"api_client.html#get_market_trades","text":"| get_market_trades ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market trades for specified markets and date range. For more information on market trades, see: https://docs.coinmetrics.io/info/markets/trades Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Trades timeseries.","title":"get_market_trades"},{"location":"api_client.html#get_market_open_interest","text":"| get_market_open_interest ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market open interest for specified markets and date range. For more information on open interest, see: https://docs.coinmetrics.io/info/markets/openinterest Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Open Interest timeseries.","title":"get_market_open_interest"},{"location":"api_client.html#get_market_liquidations","text":"| get_market_liquidations ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market liquidations for specified markets and date range. For more information on liquidations, see: https://docs.coinmetrics.io/info/markets/liquidations Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Liquidations timeseries.","title":"get_market_liquidations"},{"location":"api_client.html#get_market_funding_rates","text":"| get_market_funding_rates ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market funding rates for specified markets and date range. For more information on funding rates, see: https://docs.coinmetrics.io/info/markets/fundingrates Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Funding Rates timeseries.","title":"get_market_funding_rates"},{"location":"api_client.html#get_market_orderbooks","text":"| get_market_orderbooks ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market order books for specified markets and date range. For more information on order books, see: https://docs.coinmetrics.io/info/markets/orderbook Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Order Books timeseries.","title":"get_market_orderbooks"},{"location":"api_client.html#get_market_quotes","text":"| get_market_quotes ( markets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None , limit_per_market : Optional [ int ] = None ) -> DataCollection Returns market quotes for specified markets and date range. For more information on quotes, see: https://docs.coinmetrics.io/info/markets/quotes Arguments : markets ( list(str), str ): list of market ids. Market ids use the following naming convention: exchangeName-baseAsset-quoteAsset-spot for spot markets, exchangeName-futuresSymbol-future for futures markets, and exchangeName-optionsSymbol-option for options markets. e.g., 'coinbase-btc-usd-spot' , 'bitmex-XBTUSD-future' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. limit_per_market ( int ): How many entries per market the result should contain. Returns : DataCollection : Market Quotes timeseries.","title":"get_market_quotes"},{"location":"api_client.html#get_mining_pool_tips_summary","text":"| get_mining_pool_tips_summary ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mining pool tips summaries for specified assets. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mining Pool Tips timeseries.","title":"get_mining_pool_tips_summary"},{"location":"api_client.html#get_mempool_feerates","text":"| get_mempool_feerates ( assets : Union [ List [ str ], str ], page_size : Optional [ int ] = 200 , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns mempool feerates for the specified assets. Note: for this method, page_size must be <= 200. Arguments : assets ( list(str), str ): list of asset names, e.g. 'btc' page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : Mempool Fee Rates timeseries.","title":"get_mempool_feerates"},{"location":"api_client.html#get_list_of_blocks","text":"| get_list_of_blocks ( asset : str , block_hashes : Optional [ Union [ List [ str ], str ]] = None , heights : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain blocks metadata. Arguments : asset ( str ): Asset name block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. heights ( str, list(str) ): Optional comma separated list of block heights to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain blocks metadata","title":"get_list_of_blocks"},{"location":"api_client.html#get_list_of_accounts","text":"| get_list_of_accounts ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts with their balances. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of blockchain accounts metadata","title":"get_list_of_accounts"},{"location":"api_client.html#get_list_of_transactions","text":"| get_list_of_transactions ( asset : str , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain transactions metadata. Arguments : asset ( str ): Asset name transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of transaction metadata","title":"get_list_of_transactions"},{"location":"api_client.html#get_list_of_balance_updates","text":"| get_list_of_balance_updates ( asset : str , accounts : Optional [ Union [ List [ str ], str ]] = None , transaction_hashes : Optional [ Union [ List [ str ], str ]] = None , block_hashes : Optional [ Union [ List [ str ], str ]] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns a list of blockchain accounts balance updates. Arguments : asset ( str ): Asset name accounts ( str, list(str) ): Optional comma separated list of accounts to filter a response. transaction_hashes ( str, list(str) ): Optional comma separated list of transaction hashes to filter a response. block_hashes ( str, list(str) ): Optional comma separated list of block hashes to filter a response. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : list of balance updates","title":"get_list_of_balance_updates"},{"location":"api_client.html#get_full_block","text":"| get_full_block ( asset : str , block_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain block with all transactions and balance updates. Arguments : asset ( str ): Asset name block_hash ( str ): block hash Returns : list(dict(str), any) : blockchain block data","title":"get_full_block"},{"location":"api_client.html#get_full_transaction","text":"| get_full_transaction ( asset : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates. Arguments : asset ( str ): Asset name transaction_hash ( str ): transaction hash Returns : list(dict(str), any) : block transaction data","title":"get_full_transaction"},{"location":"api_client.html#get_full_transaction_for_block","text":"| get_full_transaction_for_block ( asset : str , block_hash : str , transaction_hash : str ) -> List [ Dict [ str , Any ]] Returns a full blockchain transaction with all balance updates for a specific block. Arguments : asset ( str ): Asset name block_hash ( str ): block hash transaction_hash ( str ): transaction hash Returns : list(dict(str, Any)) : block transaction data with balance updates","title":"get_full_transaction_for_block"},{"location":"api_client.html#get_transaction_tracker","text":"| get_transaction_tracker ( asset : str , txids : Optional [ Union [ List [ str ], str ]] = None , replacements_for_txids : Optional [ Union [ List [ str ], str ]] = None , replacements_only : Optional [ bool ] = None , page_size : Optional [ int ] = None , paging_from : Optional [ Union [ PagingFrom , str ]] = None , start_time : Optional [ Union [ datetime , date , str ]] = None , end_time : Optional [ Union [ datetime , date , str ]] = None , start_inclusive : Optional [ bool ] = None , end_inclusive : Optional [ bool ] = None , timezone : Optional [ str ] = None ) -> DataCollection Returns status updates for the specified or all transactions. Arguments : asset ( str ): Asset name txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to track. replacements_for_txids ( str, list(str) ): Optional comma separated list of transaction identifiers (txid) to get the corresponding replacement transactions for. Mutually exclusive with txids. replacements_only ( bool ): Boolean indicating if the response should contain only the replacement transactions. page_size ( int ): number of items returned per page when calling the API. If the request times out, try using a smaller number. paging_from ( PagingFrom, str ): Defines where you want to start receiving items from, 'start' or 'end' of the timeseries. start_time ( datetime, date, str ): Start time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 end_time ( datetime, date, str ): End time of the timeseries. Multiple formats of ISO 8601 are supported: 2006-01-20T00:00:00Z, 2006-01-20T00:00:00.000Z, 2006-01-20T00:00:00.123456Z, 2006-01-20T00:00:00.123456789Z, 2006-01-20, 20060120 start_inclusive ( bool ): Flag to define if start timestamp must be included in the timeseries if present. True by default. end_inclusive ( bool ): Flag to define if end timestamp must be included in the timeseries if present. True by default. timezone ( str ): timezone of the start/end times in db format for example: \"America/Chicago\". Default value is \"UTC\". For more details check out API documentation page. Returns : DataCollection : status updates for the specified or all transactions.","title":"get_transaction_tracker"}]}